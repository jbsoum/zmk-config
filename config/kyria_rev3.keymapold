/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/outputs.h>

//jbsoum add - make sure keypresses always sent over BT: https://zmk.dev/docs/behaviors/outputs
#include <dt-bindings/zmk/outputs.h>

//jbsoum add - macros from here: https://zmk.dev/docs/behaviors/hold-tap
#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro
#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer


//jbsoum add - define layers for custom keymap
#define DEFAULT 0
#define NUMBER 1
#define FUNC 2

/ {
	macros {
        //jbsoum add - undo fix for VBA (use Alt, E, R, Enter instead, works for most office products)
        alt_redo: alternate_redo {
            label = "alternate_redo";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>
            bindings
                = <&macro_tap &kp LALT>
                , <&macro_tap &kp E>
                , <&macro_tap &kp R>
                , <&macro_tap &kp ENTER> 
                ;
            };
        //jbsoum add - power tap - toggles backlight / display / underglow on and off
        pow_tap: power_tap {
            label = "power_tap";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>
            bindings
                = <&macro_tap &rgb_ug RGB_TOG>
                , <&macro_tap &rgb_ug BL_TOG>
                , <&macro_tap &kp R>
                , <&macro_tap &kp ENTER> 
                ;
            };
        //jbsoum add - layer - layer from DEFAULT to NUMBER
        lay_0_1: power_tap {
            label = "power_tap";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB()>
                , <&macro_press MO_TOG(NUMBER)>
                , <&macro_release MO_TOG(NUMBER)>
                , <&macro_tap &kp ENTER> 
                ;
            };
        };
    };
    behaviors {
		//jbsoum add - autoshift macro from here: https://zmk.dev/docs/behaviors/hold-tap
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
		//jbsoum add - momentary layer when held, toggle layer when tapped, from here: https://zmk.dev/docs/behaviors/hold-tap
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
        //jbsoum add - crosshand only modifiers, from here: https://zmk.dev/docs/behaviors/hold-tap
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10>;    // <---[[right-hand keys]]
        };

        //jbsoum add - power key
        pow: power {
            compatible = "zmk,behavior-mod-morph";
            label = "POWER";
            #binding-cells = <0>;
            bindings = <&pow_tap>, <&ext_power EP_TOG>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        //jbsoum add - custom shift keys - typing
        com_qmk: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        per_exc: period_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        amp_at: ampersand_at {
            compatible = "zmk,behavior-mod-morph";
            label = "AMPERSAND_AT";
            #binding-cells = <0>;
            bindings = <&kp AMP>, <&kp AT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fsh_min: slash_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_MINUS";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp MINUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        bsh_und: backslash_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSLASH_UNDERSCORE";
            #binding-cells = <0>;
            bindings = <&kp BSLH>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hsh_tld: hash_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_TILDE";
            #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dll_pct: dollar_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLLAR_PERCENT";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR>, <&kp PERCENT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        //jbsoum add - custom shift keys - numbers
        pls_gt: plus_greater_than {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_GREATER_THAN";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp GREATER_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        min_lt: minus_less_than {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_LESS_THAN";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp LESS_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mlt_pwr: multiply_power {
            compatible = "zmk,behavior-mod-morph";
            label = "MULTIPLY_POWER";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        div_lpr: divide_left_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "DIVIDE_LEFT_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp LPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        eql_pct: equal_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_PERCENT";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PERCENT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fsh_dll: foward_slash_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "FORWARD_SLASH_DOLLAR";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp DOLLAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        //jbsoum add - custom shift keys - brackets
        lpr_rpr: left_right_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_RIGHT_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbt_rbt: left_right_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_RIGHT_BRACKET";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbc_rbc: left_right_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_RIGHT_BRACE";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lt_gt: less_greater_than {
            compatible = "zmk,behavior-mod-morph";
            label = "LESS_GREATER_THAN";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        grv_pip: grave_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_PIPE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fsh_bsh: forward_back_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "FORWARD_BACK_SLASH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        //jbsoum add - custom shift keys - actions
        hme_end: home_end {
            compatible = "zmk,behavior-mod-morph";
            label = "HOME_END";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp END>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        bsp_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        psr_ins: printscreen_insert {
            compatible = "zmk,behavior-mod-morph";
            label = "PRINTSCREEN_INSERT";
            #binding-cells = <0>;
            bindings = <&kp PRINTSCREEN>, <&kp INSERT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        tab_cap: tab_capslock {
            compatible = "zmk,behavior-mod-morph";
            label = "TAB_CAPSLOCK";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp CAPSLOCK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ent_esc: enter_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "ENTER_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ENTER>, <&kp ESCAPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

    };

	keymap {
		compatible = "zmk,keymap";
        bindings = <&out OUT_BLE>;

		default_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |  POW |  Q  |  W  |  F   |  P   |  B   |                                              |  J   |  L    |  U    |  Y   |   ;:  |   \_  |
// |  $%  |  A  |  R  |  S   |  T   |  G   |                                              |  M   |  N    |  E    |  I   |   O   |   '"  |
// |  #~  |  Z  |  X  |  C   |  D   |  V   | NONE | PRS-INS |               | RGUI | NONE |  K   |  H    |  ,?   |  .!  |   /-  |   &@  |
//          | LAYER | L-SHIFT | L-ALT | L-CTL | SPACE |                               | ENT-ESC | R-CTL | R-ALT | TAB-CAPS | BKS-DEL |
			bindings = <
	AS(pow)      AS(Q) AS(W) AS(F) AS(P) AS(B)                                                 AS(J) AS(L)  AS(U)         AS(Y)         AS(SEMI)     AS(bsh_und)
	AS(dll_pct)  AS(A) AS(R) AS(S) AS(T) AS(G)                                                 AS(M) AS(N)  AS(E)         AS(I)         AS(O)        AS(SQT)
	AS(hsh_tld)  AS(Z) AS(X) AS(C) AS(D) AS(V) &kp NONE AS(psr_ins)        &kp RGUI &kp NONE   AS(K) AS(H)  AS(com_qmk)   AS(per_exc)   AS(fsh_min)  AS(amp_at)
	                 &kp LGUI &kp LSHFT &kp LALT &kp LCTRL &kp SPACE        AS(ent_esc)  &kp RCTRL  &kp RALT AS(tab_cap) AS(bsp_del)
			>;

			sensor-bindings = <&inc_dec_kp LC(TAB) LS(LC(TAB)) &inc_dec_kp alt_redo LC(Z)>;
		};

		number_layer {
// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |  POW        |  F1     |  F2       |  F3       |  F4       |  F5    |                                           |  F11    |  7   |  8  |  9  |   *^      |   /$      |
// |  /\         |  <>     |  {}       |  []       |  ()       |  `|    |                                           |  F12    |  4   |  5  |  6  |   +>      |   =%      |
// |  #~         |  F6     |  F7       |  F8       |  F9       |  F10   | NONE | PRS-INS |            | RGUI | NONE |  K      |  1   |  2  |  3  |   -<      |   PERIOD  |
//                                      | LYR-DEF | L-SHIFT | L-ALT | L-CTL | SPACE |                        | ENT-ESC | R-CTL | R-ALT | TAB-CAPS | BKS-DEL |
			bindings = <
	AS(pow)      &kp F1    &kp F2      &kp F3      &kp F4      &kp F5                                                 &kp F11 &kp 7  &kp 8 &kp 9 AS(mlt_pwr)  AS(fsh_dll)
	AS(fsh_bsh)  AS(lt_gt) AS(lbc_rbc) AS(lbt_rbt) AS(lpr_rpr) AS(grv_pip)                                            &kp F12 &kp 4  &kp 5 &kp 6 AS(pls_gt)   AS(eql_pct)
	AS(hsh_tld)  &kp F6    &kp F7      &kp F8      &kp F9      &kp F10 &kp NONE AS(psr_ins)        &kp RGUI &kp NONE  AS(K)   &kp 1  &kp 2 &kp 3 AS(min_lt)   PERIOD
	                            &kp LGUI &kp LSHFT &kp LALT &kp LCTRL &kp SPACE                       AS(ent_esc)  &kp RCTRL  &kp RALT AS(tab_cap) AS(bsp_del)
			>;

			sensor-bindings = <&inc_dec_kp LC(TAB) LS(LC(TAB)) &inc_dec_kp alt_redo LC(Z)>;
		};

		gaming_layer {
// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |  POW       |  F1     |  F2       |  F3       |  F4       |  F5    |                                            |  F6     |  F7     |  F8    |  F9    |   F10  |   F11  |
// |  LHTUP     |  Q      |  A        |  W        |  D        |  E     |                                            |  R      |  LEFT   |  UP    |  RIGHT |   F    |   F12  |
// |  LHTDN     |  BL     |  OSB      |  S        |  Z        |  X     | NONE | PRS-INS |            | RGUI | NONE  |  C      |  V      |  DOWN  |        |        |        |
//                                      | LYR-DEF | L-SHIFT | L-ALT | L-CTL | SPACE |                        | ENT-ESC | R-CTL | R-ALT | TAB-CAPS | BKS-DEL |
			bindings = <
	AS(pow)      &kp F1    &kp F2      &kp F3      &kp F4      &kp F5                                                 &kp F11 &kp 7  &kp 8 &kp 9 AS(mlt_pwr)  AS(fsh_dll)
	AS(fsh_bsh)  AS(lt_gt) AS(lbc_rbc) AS(lbt_rbt) AS(lpr_rpr) AS(grv_pip)                                            &kp F12 &kp 4  &kp 5 &kp 6 AS(pls_gt)   AS(eql_pct)
	AS(hsh_tld)  &kp F6    &kp F7      &kp F8      &kp F9      &kp F10 &kp NONE AS(psr_ins)        &kp RGUI &kp NONE  AS(K)   &kp 1  &kp 2 &kp 3 AS(min_lt)   PERIOD
	                            &kp LGUI &kp LSHFT &kp LALT &kp LCTRL &kp SPACE                       AS(ent_esc)  &kp RCTRL  &kp RALT AS(tab_cap) AS(bsp_del)
			>;

			sensor-bindings = <&inc_dec_kp LC(TAB) LS(LC(TAB)) &inc_dec_kp alt_redo LC(Z)>;
		};
	};
};
